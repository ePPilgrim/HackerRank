using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using SimCorp.IMS.MiddleOffice.Engine.Facade;
using SimCorp.IMS.MiddleOffice.Engine.Facade.Common;
using SimCorp.IMS.MiddleOffice.Engine.Api;
using SimCorp.IMS.MiddleOffice.Engine.Api.Common;

namespace SimCorp.IMS.MiddleOffice.Engine.Api.Test {
    public class CalculationEngineFacadeStub : ICalculationEngineFacade {


        public List<Analytics> Analytics = new List<Analytics>();
        public List<CalculationArgument> CalculationArguments = new List<CalculationArgument>();
        public Dictionary<int, int> Results = new Dictionary<int, int>();

        public CalculationEngineFacadeStub() {
            init();
        }
        public Results Calculate(DateTime analysisDate, List<string> analyticsIds, RestrictionSet restrictions, List<GroupingCriteria> groupingCriterias) {
           return Calculate(analysisDate, 0, -1, analyticsIds, restrictions, groupingCriterias );
        }

        public Results Calculate(DateTime analysisDate, PeriodTermUnit periodTermUnit, int periodTermLenght, List<string> analyticsIds, RestrictionSet restrictions, List<GroupingCriteria> groupingCriterias) {
            var res = new List<AnalyticsResult>();
            var basenodeid = analysisDate.ToString();
            if (periodTermLenght > 0) {
                basenodeid += periodTermUnit.ToString() + periodTermLenght.ToString();
            }
            foreach (var id in analyticsIds) {
                foreach (var rest in restrictions.Restrictions) {
                    foreach (var criteria in groupingCriterias) {
                        res.Add(new AnalyticsResult() {NodeId = basenodeid + id.ToString() + rest.ToString() + criteria.ToString()});
                    }
                }
            }
            return new Results(res);
        }

        public List<Analytics> GetSupportedAnalytics() {
            return Analytics;
        }

        public List<NodeSpecification> GetLeafNodeSpecifications(RestrictionSet restrictions, List<GroupingCriteria> groupingCriterias, DateTime analysisDate) {
            return null;
        }

        public List<string> GetNodeIds(List<NodeSpecification> nodeSpecifications) {
            return null;
        }

        private void init() {
            foreach (var id in new[] {"IRR", "AnualIRR"}) {
                foreach (var formattype in new[] {FormatType.Numeric, FormatType.Amount}) {
                    foreach (var currencytypename in new[] {"QC", "RC", "PC"}) {
                        foreach (var periodname in new[] {"Year", "Month"}) {
                            Analytics.Add(new Analytics {
                                Id = id, Title = id, FormatType = formattype, TypeName = formattype.ToString(),
                                CurrencyTypeName = currencytypename, PeriodName = periodname
                            });
                        }
                    }
                }
            }

            var Date = new DateTime(2014, 12, 21);
            var tic = 1;
            foreach (var id in new[] {"IRR", "AnualIRR"}) {
                foreach (
                var groupingcriteria in new[] {GroupingCriteriaEnum.PortfolioKey, GroupingCriteriaEnum.SecurityKey}) {
                    foreach (var restrictionCriteria in
                    new[] {RestrictionCriteriaEnum.PortfolioKey, RestrictionCriteriaEnum.SecurityKey}) {
                        foreach (var periodlength in new[] {1, -1}) {
                            var calcArg = new CalculationArgument {
                                AnalysisDates = new[] {Date.AddDays(1)}, Groupings = new[] {groupingcriteria},
                                AnalyticIds = new[] {id}, PeriodTermLength = tic*periodlength,
                                PeriodTermUnit = PeriodTermUnitEnum.Years,
                                RestrictionSet =
                                    new RestrictionSetEntity {
                                        Restrictions =
                                            new[] {
                                                new RestrictionEntity
                                                {Criteria = restrictionCriteria, Values = new[] {"1"}}
                                            },
                                        OnlyIncludeActiveInvestment = true, OnlyIncludeSecuritiesLinkedToAnAsset = true
                                    }
                            };
                            if (calcArg.PeriodTermLength < 0) { calcArg.PeriodTermLength = null; }
                            if (tic%2 == 0) { calcArg.PeriodTermUnit = null; }
                            CalculationArguments.Add(calcArg);

                            var hashStr =
                            ApiEnumConverter<GroupingCriteriaEnum, GroupingCriteria>.Convert(groupingcriteria).ToString();
                            //hashStr += ParseRestrictionSet(calcArg.RestrictionSet, user).Restrictions[0].Criteria.ToString();
                            hashStr += id;
                            hashStr += Date.Date.ToString();
                            if (calcArg.PeriodTermLength.HasValue && calcArg.PeriodTermUnit.HasValue) {
                                hashStr += calcArg.PeriodTermLength.ToString();
                                hashStr +=
                                ApiEnumConverter<PeriodTermUnitEnum, PeriodTermUnit>.Convert(
                                calcArg.PeriodTermUnit.Value).ToString();
                            }
                            Results.Add(hashStr.GetHashCode(), tic);
                        }
                    }
                }

            }
        }
    }
}
