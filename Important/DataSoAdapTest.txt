using System;
using System.Collections.Generic;
using System.Linq;
using Moq;
using SimCorp.IMS.MiddleOffice.Engine.Api;
using SimCorp.IMS.MiddleOffice.Engine.Api.Common;
using SimCorp.IMS.MiddleOffice.Engine.Facade;
using SimCorp.IMS.MiddleOffice.Engine.Facade.Common;
using SimCorp.IMS.Framework.DataSharing;
using SimCorp.IMS.Framework.DataSharing.Service.Implementation;
using SimCorp.IMS.Framework.DataSharing.Queryable;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace SimCorp.IMS.MiddleOffice.Engine.Api.Test {
    [TestClass]
    public class DataSourceAdapterCalculationEngineTest {

        public DataSourceAdapterCalculationEngineTest() {
        }

        private delegate bool comSelect(string Id, string Title, FormatType FormatType, string TypeName, string CurrencyTypeName, string PeriodName, IDictionary<string,Array> Result);

        [TestMethod]
        public void SelectFromTypes() {
            var dataSource = new DataSourceAdapterCalculationEngine(new CalculationEngineFacadeStub());
            dataSource.Initialize();
            var credentials = new OperationCredentials(Environment.UserName.ToUpper());

            comSelect Comp = (a1, a2, a3, a4, a5, a6, res) => {
                bool flag = res["Id"].GetValue(0).Equals(a1);
                flag = flag && res["Title"].GetValue(0).Equals(a2);
                flag = flag && res["FormatType"].GetValue(0).Equals((int)a3);
                flag = flag && res["TypeName"].GetValue(0).Equals(a4);
                flag = flag && res["CurrencyTypeName"].GetValue(0).Equals(a5);
                flag = flag && res["PeriodName"].GetValue(0).Equals(a6);
                return flag;
            };

            var query = new QueryData() {
                EntityName = "Analytics",
                PropertyPaths = new[] {"Id", "Title", "FormatType", "TypeName", "CurrencyTypeName", "PeriodName"},
                Filter = null,
                MaxCount = 1000
            };

            query.Filter = "Id in (\"IRR\") and FormatType in (Numeric) and CurrencyTypeName in (\"QC\") and PeriodName in (\"Month\")";
            var result = dataSource.SelectAsync(credentials, query).Result.Data;
            Assert.IsTrue(Comp("IRR","IRR",FormatType.Numeric, "Numeric", "QC", "Month",result));

            query.Filter = "Id in (\"AnualIRR\") and FormatType in (Numeric) and CurrencyTypeName in (\"PC\") and PeriodName in (\"Month\")";
            result = dataSource.SelectAsync(credentials, query).Result.Data;
            Assert.IsTrue(Comp("AnualIRR", "AnualIRR", FormatType.Numeric, "Numeric", "PC", "Month", result));

            query.Filter = "Id in (\"IRR\") and FormatType in (Amount) and CurrencyTypeName in (\"RC\") and PeriodName in (\"Year\")";
            result = dataSource.SelectAsync(credentials, query).Result.Data;
            Assert.IsTrue(Comp("IRR", "IRR", FormatType.Amount, "Amount", "RC", "Year", result));

            query.Filter = "Id in (\"IRR\",\"AnualIRR\") and FormatType in (Amount) and CurrencyTypeName in (\"RC\") and PeriodName in (\"Year\")";
            result = dataSource.SelectAsync(credentials, query).Result.Data;
            Assert.IsTrue(Comp("IRR", "IRR", FormatType.Amount, "Amount", "RC", "Year", result));

            query.Filter = "Id in (\"AnualIRR\") and FormatType in (Amount) and CurrencyTypeName in (\"RC\") and PeriodName in (\"Year\")";
            result = dataSource.SelectAsync(credentials, query).Result.Data;
            Assert.IsTrue(Comp("AnualIRR", "AnualIRR", FormatType.Amount, "Amount", "RC", "Year", result));

            query.Filter = "Id in (\"AnualIRR\") and FormatType in (Amount) and CurrencyTypeName in (\"QC\") and PeriodName in (\"Year\")";
            result = dataSource.SelectAsync(credentials, query).Result.Data;
            Assert.IsTrue(Comp("AnualIRR", "AnualIRR", FormatType.Amount, "Amount", "QC", "Year", result));

            query.Filter = "Id in (\"AnualIRR\") and FormatType in (Numeric) and CurrencyTypeName in (\"QC\") and PeriodName in (\"Month\")";
            result = dataSource.SelectAsync(credentials, query).Result.Data;
            Assert.IsTrue(Comp("AnualIRR", "AnualIRR", FormatType.Numeric, "Numeric", "QC", "Month", result));
        }

        [TestMethod]
        public void OperationsEntityNames() {
            //var dataSource = new DataSourceAdapterCalculationEngine(MockCalculationEngineFacade.Object);
            //dataSource.Initialize();
            //var credentials = new OperationCredentials(Environment.UserName.ToUpper());

            //            public DateTime[] AnalysisDates { get; set; }
            //public GroupingCriteriaEnum[] Groupings { get; set; }
            //public string[] AnalyticIds { get; set; }

            //public RestrictionSetEntity RestrictionSet { get; set; }

            //public PeriodTermUnitEnum? PeriodTermUnit { get; set; }

            //public int? PeriodTermLength { get; set; }

            //var fourthItems = new OperationData("Calculate", false) {
            //    {"AnalysisDates", new [] { CalculationArguments[0].AnalysisDates}},
            //    { "Groupings", new [] { CalculationArguments[0].Groupings } },
            //    { "AnalyticIds", new [] { CalculationArguments[0].AnalyticIds } },
            //    { "RestrictionSet", new [] { CalculationArguments[0].RestrictionSet } },
            //    { "PeriodTermLength", new [] { CalculationArguments[0].PeriodTermLength } },
            //};

            // Find the operation to perform:

           // var result = dataSource.InvokeAsync(credentials, "CalculateAnalytics", fourthItems).Result;
            // FourthItemSumResult typedResult = OperationDataSerialization.Deserialize<FourthItemSumResult>(operation.Result, result);
            //Assert.AreEqual(110, typedResult.SumValue);
        }

    }
}
